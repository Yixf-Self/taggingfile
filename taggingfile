#!/usr/bin/env perl
use strict;
use Getopt::Long;
use File::Path qw(make_path remove_tree);
use File::Find;
use File::Basename;

my $usage = <<USAGE;

taggingfile

Function : Cataloging files by tags (Only for *nix right now!!!)
Author   : Wei Shen <shenwei356\@gmail.com> <http://shenwei.me>
Website  : https://github.com/shenwei356/taggingfile
Created  : 2014-07-03
Update   : 2014-07-12

Usage: taggingfile [options] [directory ...]

Options:

    -h                   Print usage.
    -help                Print usage and details.
    -s --suffix PATTERN  File suffix for filter of the files, 
                         cases ignored. [.*]
    -p --prefix STRING   Tag directory prefix ["_TAG_"]
    -clear               Remove all the tag directories.
    -renew               Remove and recreate all the tags directories.


Use "taggingfile --help" for usage and details.

Examples:

1. tagging all the file in current directory

    taggingfile

2. when big changes happen, for example, file or tag deleted.

    taggingfile -renew

3. tagging pdf files in pdfs directory

    taggingfile -d pdfs -s .pdf

USAGE

my $detail = <<DETAIL;

Motivation:

I simply cataloged articles PDF files by storing them in different 
directories which stands for different categories. However some
articles belong to several fields. It made me crazy for cataloging
them.

It's not a good practice to copy them to different directories, 
because it will occupy more disk space and the modify only act for
one copy of the file.

Symbolic link is a good solution for low disk usage and file consistency.

How:

- File organization:

    - The hierarchic directories in current path countain the targets files.

    - Every file in the directory would be paired with a tag file,
        for example, "a.txt" is paired with "a.txt.tag". 
- Tag:

    - Tag file countains tags in multline. If no tag file given
        or no tags found in tag file. The file will be categorized 
        as "uncategorized".

    - Hierarchic tag is supported, e.g. "Tag, Important", directory tree 
        "Tag/Important" will be created.

- This script should be excuted in same path with the directory.

- File suffix (optional) is for filter of the files.

- Directories with name of tags will be created in current path.

- The symlink uses relative path. Unlinked symlinks will NOT be 
   removed every excution for security unless -renew option is specified.

DETAIL

my ( $h, $help, $suffix, $prefix, $renew, $clear )
    = ( undef, undef, ".*", "_TAG_", undef, undef );

# for saving the tag directory prefixes for renew
my $tag_prefix_history_file = ".tag_prefix_history";
my $prefixes                = {};

GetOptions(
    'h'          => \$h,
    'help'       => \$help,
    'suffix|s=s' => \$suffix,
    'prefix|p=s' => \$prefix,
    'renew'      => \$renew,
    'clear'      => \$clear
    )
    or die qq(
Use "taggingfile -h"    for usage
Use "taggingfile -help" for usage and details

);

die $usage if $h;
die "$usage\n$detail" if $help;
die "Prefix length should not be greater than 3. Your input: $prefix\n"
    unless length $prefix >= 3;

my @dirs = @ARGV;

@dirs = glob "*" if @dirs == 0;

$prefix .= "_";
@dirs = grep { -d and not /^\.+/ and not /^$prefix/ } @dirs;

if ( -e $tag_prefix_history_file ) {
    $prefixes = &get_tag_prefix_history($tag_prefix_history_file);
}

# delete and recreate directories for all tags.
if ($renew) {
    &clear_tag_directories($prefixes);
}
elsif ($clear) {
    &clear_tag_directories($prefixes);
    exit 0;
}

# get file list
my $files = [];
for my $dir (@dirs) {
    push @$files, @{
        &get_file_list(
            $dir,
            sub {
                my ($file) = @_;
                return 1
                    if $file =~ /$suffix$/i
                    and $file !~ /\.tag/i
                    and $file !~ /^\./i;    # config file
                return 0;
            }
        )
    };
}

# create symlink
for my $file (@$files) {
    my $tags = &get_tags($file);
    &create_symlink( $file, $tags );
}

# save the tag directory prefixes for renew
$$prefixes{$prefix}++;
&save_tag_prefix_history( $tag_prefix_history_file, $prefixes );

sub clear_tag_directories(/%) {
    my ($prefixes) = @_;
    my @dirs = grep { -d and not /^\./ } glob "*";
    my @tag_directories = ();
    for my $dir (@dirs) {
        for my $prefix ( keys %$prefixes ) {
            if ( $dir =~ /^$prefix/ ) {
                push @tag_directories, $dir;
            }
        }
    }

    # remove old tag directories
    for my $dir (@tag_directories) {
        remove_tree($dir) or die "fail to remove directory: $dir. $!\n";
    }

    # reset
    $prefixes = {};
    &save_tag_prefix_history( $tag_prefix_history_file, $prefixes );
}

sub get_tag_prefix_history($) {
    my ($file) = @_;
    my $prefixes = {};
    open FH, "<", $file
        or die "fail to open file: $file. $!\n";
    while (<FH>) {
        s/\r?\n//g;
        s/^\s+//;
        s/\s+$//;
        next if $_ eq "";
        $$prefixes{$_}++;
    }
    close FH;
    return $prefixes;
}

sub save_tag_prefix_history($/%) {
    my ( $file, $prefixes ) = @_;
    open FH, ">", $file
        or die "fail to write file: $file. $!\n";
    for my $prefix ( sort keys %$prefixes ) {
        print FH "$prefix\n";
    }
    close FH;
}

sub create_symlink($/@) {
    my ( $file, $tags ) = @_;
    for my $tag (@$tags) {
        $tag = "$prefix$tag";

        if ( not -e $tag ) {
            make_path($tag) or die "fail to mkdir: $tag. $!\n";
        }

        # symlink for target file
        my $link_file = "$tag/" . basename($file);
        if ( -e "$link_file" ) {
            unlink "$link_file" or die "fail to unlike: $link_file. $!\n";
        }
        my $ok = symlink "../" x ( 1 + $tag =~ tr/\/// ) . "$file",
            $link_file;
        if ( not $ok ) {
            warn "fail to create symlink for $file. $!\n";
            next;
        }

        # symlink for tag file
        my $tag_file = "$tag/" . basename($file) . ".tag";
        if ( -e "$tag_file" ) {
            unlink "$tag_file" or die "fail to unlike: $tag_file. $!\n";
        }
        my $ok = symlink "../" x ( 1 + $tag =~ tr/\/// ) . "$file.tag",
            $tag_file;
        if ( not $ok ) {
            warn "fail to create symlink for $file.tag. $!\n";
            next;
        }
    }
}

sub get_tags($) {
    my ($file)      = @_;
    my $tag_file    = "$file.tag";
    my $tags        = [];
    my $default_tag = "uncategorized";

    if ( not -e $tag_file ) {    # no tag file
        open FH, ">", $tag_file
            or die "fail to write file $tag_file. $!\n";
        print FH "$default_tag\n";
        close FH;
        return [$default_tag];
    }

    open FH, "<", $tag_file
        or die "fail to open file $tag_file. $!\n";
    while (<FH>) {
        s/\r?\n//g;
        s/^\s+//;
        s/\s+$//;
        s/[\/\\]+//g;
        next if $_ eq "";

        $_ = join "/", split( /,\s*/, $_ );

        push @$tags, lc $_;    # change to lowercase
    }
    close FH;

    if ( @$tags == 0 ) {       # no tags
        return [$default_tag];
    }
    return $tags;
}

sub get_file_list($/&) {
    my ( $dir, $filter ) = @_;    # filter is a subroutine to filter a file

    my $files  = [];
    my $wanted = sub {
        return if /^\.+$/;
        return if $_ eq $dir;

        if ( &$filter($_) ) {
            push @$files, $File::Find::name;
        }
    };

    find( $wanted, ($dir) );

    return $files;
}
