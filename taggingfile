#!/usr/bin/env perl
use strict;
use Getopt::Long;
use File::Path qw(make_path remove_tree);
use File::Find;
use File::Basename;

my $program = "taggingfile";
my $usage = <<USAGE;

$program

Function : Cataloging files by tags (Only for *nix right now!!!)
Author   : Wei Shen <shenwei356\@gmail.com> <http://shenwei.me>
Website  : https://github.com/shenwei356/$program
Created  : 2014-07-03
Update   : 2014-07-11 fix a serious bug that could delete the directory in name
                      of a tag.

Usage: $program [options] [directory ...]

Options:
    -h                   Print usage
    -help                Print usage and details
    -s --suffix PATTERN  File suffix for filter of the files, 
                         cases ignored. [.*]
    -p --prefix STRING   Tag directory prefix ["_TAG_"]
    -renew               Attention! It will delete and recreate the
                         directory of all tags.


Use "$program --help" for usage and details

Example:
    1) tagging pdf files in pdfs directory
    $program -d pdfs -s .pdf

    2) tagging all the file in current directory
    $program

USAGE

my $detail = <<DETAIL;

Motivation:

    I simply cataloged publication PDF files by storing them in different 
    directories which stands for different categories. However some
    publiction belong to several fields. It made me crazy for cataloging
    them.

    It's not a good practice to copy it to different directories, because it
    will occupy more disk space and the modify only act for one file.

    Symbolic link is the solution to disk usage and file consistency.

Details:

    1) File organization:
         a) The hierarchic directories in current path countain targets files.
         b) Every file in the directory would be paired with a tag file,
            for example, "a.txt" is paired with "a.txt.tag". 
    2) Tag:
         a) Tag file countains tags in multline. If no tag file given
            or no tags found in tag file. The file will be categorized 
            as "Uncategorized".
         b) Hierarchic tag is supported. e.g, "Tag 2, Important".
    3) This script should be excuted in same path with the directory.
    4) File suffix (optional) is for filter of the files.
    5) Directories with name of tags will be created in current path.
    6) The symlink use relative path. Unlinked symlinks will NOT be 
       removed every excution for security unless -renew option is specified.

DETAIL

my ( $h, $help, $suffix, $prefix, $renew )
    = ( undef, undef, ".*", "_TAG_", undef );

GetOptions(
    'h'          => \$h,
    'help'       => \$help,
    'suffix|s=s' => \$suffix,
    "prefix|p=s" => \$prefix,
    'renew'      => \$renew
    )
    or die qq(
Use "$program -h"     for usage
Use "$program --help" for usage and details

);

die $usage if $h;
die "$usage\n$detail" if $help;

my @dirs = @ARGV;

@dirs = glob "*" if @dirs == 0;

@dirs = grep { -d and not /^\.+/ and not /^$prefix/ } @dirs;

# get_file_list
my $files = [];
for my $dir (@dirs) {

    # get file list
    push @$files, @{
        &get_file_list(
            $dir,
            sub {
                my ($file) = @_;
                return 1
                    if $file =~ /$suffix$/i
                    and $file !~ /\.tag/i
                    and $file !~ /^\./i;    # config file
                return 0;
            }
        )
    };
}

# read tags
my $file_tags = {};                         # avoid compute repeatly
my $all_tags  = {};
for my $file (@$files) {
    my $tags = &get_tags($file);

    $$file_tags{$file} = $tags;

    for my $tag (@$tags) {                  # for renew
        $$all_tags{$tag}++;
    }
}

# delete and recreate directories for all tags.
if ($renew) {
    for my $tag ( keys %$all_tags ) {
        $tag = "$prefix$tag";
        if ( -e $tag and -d $tag ) {
            remove_tree($tag) or die "fail to remove directory: $tag. $!\n";
        }
    }
}

# create symlink
for my $file (@$files) {
    my $tags = $$file_tags{$file};
    &create_symlink( $file, $tags );
}

sub create_symlink($/@) {
    my ( $file, $tags ) = @_;
    for my $tag (@$tags) {
        $tag = "$prefix$tag";

        if ( not -e $tag ) {
            make_path($tag) or die "fail to mkdir: $tag. $!\n";
        }

        # symlink for target file
        my $link_file = "$tag/" . basename($file);
        if ( -e "$link_file" ) {
            unlink "$link_file" or die "fail to unlike: $link_file. $!\n";
        }
        my $ok = symlink "../" x ( 1 + $tag =~ tr/\/// ) . "$file",
            $link_file;
        if ( not $ok ) {
            warn "fail to create symlink for $file. $!\n";
            next;
        }

        # symlink for tag file
        my $tag_file = "$tag/" . basename($file) . ".tag";
        if ( -e "$tag_file" ) {
            unlink "$tag_file" or die "fail to unlike: $tag_file. $!\n";
        }
        my $ok = symlink "../" x ( 1 + $tag =~ tr/\/// ) . "$file.tag",
            $tag_file;
        if ( not $ok ) {
            warn "fail to create symlink for $file.tag. $!\n";
            next;
        }
    }
}

sub get_tags($) {
    my ($file)      = @_;
    my $tag_file    = "$file.tag";
    my $tags        = [];
    my $default_tag = "uncategorized";

    if ( not -e $tag_file ) {    # no tag file
        open FH, ">", $tag_file
            or die "fail to write file $tag_file. $!\n";
        print FH ". $!\n";
        close FH;
        return [$default_tag];
    }

    open FH, "<", $tag_file
        or die "fail to open file $tag_file. $!\n";
    while (<FH>) {
        s/\r?\n//g;
        s/^\s+//;
        s/\s+$//;
        s/[\/\\]+//g;
        next if $_ eq "";

        $_ = join "/", split( /,\s+/, $_ );

        push @$tags, lc $_; # change to lowercase
    }
    close FH;

    if ( @$tags == 0 ) {    # no tags
        return [$default_tag];
    }
    return $tags;
}

sub get_file_list($/&) {
    my ( $dir, $filter ) = @_;    # filter is a subroutine to filter a file

    my $files  = [];
    my $wanted = sub {
        return if /^\.+$/;
        return if $_ eq $dir;

        if ( &$filter($_) ) {
            push @$files, $File::Find::name;
        }
    };

    find( $wanted, ($dir) );

    return $files;
}
